<div class="modal fade show" tabindex="-1" role="dialog" style="display:@(IsVisible ? "block" : "none"); background-color: rgba(0,0,0,0.5);">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add Service Visit</h5>
                <button type="button" class="btn-close" @onclick="CloseDialog"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label for="id" class="form-label">ID</label>
                    <input type="number" class="form-control" id="id" @bind="Id" />
                </div>
                <div class="mb-3">
                    <label for="name" class="form-label">Date</label>
                    <input type="date" class="form-control" id="date" @bind="Date"/>
                </div>
                <div class="mb-3">
                    <label for="price" class="form-label">Price</label>
                    <input type="number" class="form-control" id="price" @bind="Price"/>
                </div>
                <div class="mb-3">
                    <label for="description1" class="form-label">Description 1</label>
                    <input type="text" class="form-control" id="description1" value="@Description1" @oninput="e => OnInputChanged(e, 1)" maxlength="20"  readonly="@IsReadOnly1"/>
                </div>
                <div class="mb-3">
                    <label for="description2" class="form-label">Description 2</label>
                    <input type="text" class="form-control" id="description2" value="@Description2" @oninput="e => OnInputChanged(e, 2)"  maxlength="20" readonly="@IsReadOnly2" />
                </div>
                <div class="mb-3">
                    <label for="description3" class="form-label">Description 3</label>
                    <input type="text" class="form-control" id="description3" value="@Description3" @oninput="e => OnInputChanged(e, 3)"  maxlength="20" readonly="@IsReadOnly3" />
                </div>
                <div class="mb-3">
                    <label for="description4" class="form-label">Description 4</label>
                    <input type="text" class="form-control" id="description4" value="@Description4" @oninput="e => OnInputChanged(e, 4)"  maxlength="20" readonly="@IsReadOnly4" />
                </div>
                <div class="mb-3">
                    <label for="description5" class="form-label">Description 5</label>
                    <input type="text" class="form-control" id="description5" value="@Description5" @oninput="e => OnInputChanged(e, 5)"  maxlength="20" readonly="@IsReadOnly5" />
                </div>
                <div class="mb-3">
                    <label for="description6" class="form-label">Description 6</label>
                    <input type="text" class="form-control" id="description6" value="@Description6" @oninput="e => OnInputChanged(e, 6)"  maxlength="20" readonly="@IsReadOnly6" />
                </div>
                <div class="mb-3">
                    <label for="description7" class="form-label">Description 7</label>
                    <input type="text" class="form-control" id="description7" value="@Description7" @oninput="e => OnInputChanged(e, 7)"  maxlength="20" readonly="@IsReadOnly7" />
                </div>
                <div class="mb-3">
                    <label for="description8" class="form-label">Description 8</label>
                    <input type="text" class="form-control" id="description8" value="@Description8" @oninput="e => OnInputChanged(e, 8)"  maxlength="20" readonly="@IsReadOnly8" />
                </div><div class="mb-3">
                    <label for="description9" class="form-label">Description 9</label>
                    <input type="text" class="form-control" id="description9" value="@Description9" @oninput="e => OnInputChanged(e, 9)"  maxlength="20" readonly="@IsReadOnly9" />
                </div>
                <div class="mb-3">
                    <label for="description10" class="form-label">Description 10</label>
                    <input type="text" class="form-control" id="description10" value="@Description10" @oninput="e => OnInputChanged(e, 10)"  maxlength="20" readonly="@IsReadOnly10" />
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="CloseDialog">Cancel</button>
                <button type="button" class="btn btn-primary" @onclick="SubmitCustomer">Add</button>
            </div>
        </div>
    </div>
</div>

@code{
    [Parameter] public bool IsVisible { get; set; } = false;
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback<ServiceVisit> OnSubmit { get; set; }

    [Parameter] public int Id { get; set; } = 0;
    [Parameter] public DateTime Date { get; set; } = DateTime.MinValue;
    [Parameter] public double Price { get; set; } = 0.0;
    [Parameter] public string Description1 { get; set; } = "";
    [Parameter] public string Description2 { get; set; } = "";
    [Parameter] public string Description3 { get; set; } = "";
    [Parameter] public string Description4 { get; set; } = "";
    [Parameter] public string Description5 { get; set; } = "";
    [Parameter] public string Description6 { get; set; } = "";
    [Parameter] public string Description7 { get; set; } = "";
    [Parameter] public string Description8 { get; set; } = "";
    [Parameter] public string Description9 { get; set; } = "";
    [Parameter] public string Description10 { get; set; } = "";

    private bool IsReadOnly1 {get; set; } = false;
    private bool IsReadOnly2 { get; set; } = true;
    private bool IsReadOnly3 { get; set; } = true;
    private bool IsReadOnly4 { get; set; } = true;
    private bool IsReadOnly5 { get; set; } = true;
    private bool IsReadOnly6 { get; set; } = true;
    private bool IsReadOnly7 { get; set; } = true;
    private bool IsReadOnly8 { get; set; } = true;
    private bool IsReadOnly9 { get; set; } = true;
    private bool IsReadOnly10 { get; set; } = true;

/*
    private void InitializeReadOnlyStates()
    {
        IsReadOnly1 = string.IsNullOrWhiteSpace(Description1);
        IsReadOnly2 = string.IsNullOrWhiteSpace(Description2);
        IsReadOnly3 = string.IsNullOrWhiteSpace(Description3);
        IsReadOnly4 = string.IsNullOrWhiteSpace(Description4);
        IsReadOnly5 = string.IsNullOrWhiteSpace(Description5);
        IsReadOnly6 = string.IsNullOrWhiteSpace(Description6);
        IsReadOnly7 = string.IsNullOrWhiteSpace(Description7);
        IsReadOnly8 = string.IsNullOrWhiteSpace(Description8);
        IsReadOnly9 = string.IsNullOrWhiteSpace(Description9);
        IsReadOnly10 = string.IsNullOrWhiteSpace(Description10);
    }
*/
    protected override void OnParametersSet()
    {
        //InitializeReadOnlyStates();
        UpdateReadOnlyStates();
    }

    private void CloseDialog()
    {
        IsVisible = false;
        if (OnClose.HasDelegate)
        {
            OnClose.InvokeAsync();
        }
    }

    private void SubmitCustomer()
    {

        if (OnSubmit.HasDelegate)
        {
            ServiceVisit serviceVisit = new(Id, Date, Price);
            if(!string.IsNullOrWhiteSpace(Description1)){
                serviceVisit.AddDescription(Description1);
                if(!string.IsNullOrEmpty(Description2)) {
                    serviceVisit.AddDescription(Description2);
                    if(!string.IsNullOrEmpty(Description3)) {
                        serviceVisit.AddDescription(Description3);
                        if(!string.IsNullOrEmpty(Description4)) {
                            serviceVisit.AddDescription(Description4);
                            if(!string.IsNullOrEmpty(Description5)) {
                                serviceVisit.AddDescription(Description5);
                                if(!string.IsNullOrEmpty(Description6)) {
                                    serviceVisit.AddDescription(Description6);
                                    if(!string.IsNullOrEmpty(Description7)){
                                        serviceVisit.AddDescription(Description7);
                                        if(!string.IsNullOrEmpty(Description8)) {
                                            serviceVisit.AddDescription(Description8);
                                            if(!string.IsNullOrEmpty(Description9)) {
                                                serviceVisit.AddDescription(Description9);
                                                if(!string.IsNullOrEmpty(Description10)) {
                                                    serviceVisit.AddDescription(Description10);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            
            OnSubmit.InvokeAsync(serviceVisit);
        }
        CloseDialog();
    }

    private void OnInputChanged(ChangeEventArgs e, int descriptionNumber)
    {
        
        var newValue = e.Value?.ToString() ?? string.Empty;

        switch (descriptionNumber)
        {
            case 1:
                Description1 = newValue;
                break;
            case 2:
                Description2 = newValue;
                break;
            case 3:
                Description3 = newValue;
                break;
            case 4:
                Description4 = newValue;
                break;
            case 5:
                Description5 = newValue;
                break;
            case 6:
                Description6 = newValue;
                break;
            case 7:
                Description7 = newValue;
                break;
            case 8:
                Description8 = newValue;
                break;
            case 9:
                Description9 = newValue;
                break;
            case 10:
                Description10 = newValue;
                break;
        }
        
        UpdateReadOnlyStates();

        StateHasChanged();
    }

    private void UpdateReadOnlyStates()
    {
        IsReadOnly1 = !(string.IsNullOrWhiteSpace(Description1) || string.IsNullOrWhiteSpace(Description2));
        IsReadOnly2 = !((!string.IsNullOrWhiteSpace(Description2) && string.IsNullOrWhiteSpace(Description3)) || (!string.IsNullOrWhiteSpace(Description1) && string.IsNullOrWhiteSpace(Description2)));
        IsReadOnly3 = !((!string.IsNullOrWhiteSpace(Description3) && string.IsNullOrWhiteSpace(Description4)) || (!string.IsNullOrWhiteSpace(Description2) && string.IsNullOrWhiteSpace(Description3)));
        IsReadOnly4 = !((!string.IsNullOrWhiteSpace(Description4) && string.IsNullOrWhiteSpace(Description5)) || (!string.IsNullOrWhiteSpace(Description3) && string.IsNullOrWhiteSpace(Description4)));
        IsReadOnly5 = !((!string.IsNullOrWhiteSpace(Description5) && string.IsNullOrWhiteSpace(Description6)) || (!string.IsNullOrWhiteSpace(Description4) && string.IsNullOrWhiteSpace(Description5)));
        IsReadOnly6 = !((!string.IsNullOrWhiteSpace(Description6) && string.IsNullOrWhiteSpace(Description7)) || (!string.IsNullOrWhiteSpace(Description5) && string.IsNullOrWhiteSpace(Description6)));
        IsReadOnly7 = !((!string.IsNullOrWhiteSpace(Description7) && string.IsNullOrWhiteSpace(Description8)) || (!string.IsNullOrWhiteSpace(Description6) && string.IsNullOrWhiteSpace(Description7)));
        IsReadOnly8 = !((!string.IsNullOrWhiteSpace(Description8) && string.IsNullOrWhiteSpace(Description9)) || (!string.IsNullOrWhiteSpace(Description7) && string.IsNullOrWhiteSpace(Description8)));
        IsReadOnly9 = !((!string.IsNullOrWhiteSpace(Description9) && string.IsNullOrWhiteSpace(Description10)) || (!string.IsNullOrWhiteSpace(Description8) && string.IsNullOrWhiteSpace(Description9)));
        IsReadOnly10 = string.IsNullOrWhiteSpace(Description9);
    }

}