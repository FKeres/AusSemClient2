@page "/"
@inject HomeService HomeService
@rendermode InteractiveServer


<PageTitle>Customer List</PageTitle>

<h3>Customers and Service Visits</h3>

<button class="btn btn-success" @onclick="ShowAddCustomerDialog">Add Customer</button>
<button class="btn btn-info" @onclick="ShowFindByIdDialog">Find by ID</button>
<button class="btn btn-info" @onclick="ShowFindByEcvDialog">Find by EČV</button>
<button class="btn btn-dark" @onclick="ShowGenerateDialog">Generate</button>
<button class="btn btn-dark" @onclick="SaveState">Save</button>
<button class="btn btn-dark" @onclick="LoadState">Load</button>
<div class="btn-group">
    <button type="button" class="btn btn-dark dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
        Test
    </button>
    <ul class="dropdown-menu">
        <li><a class="dropdown-item" @onclick="TestHeap">TesHeap</a></li>
        <li><a class="dropdown-item" @onclick="TestHash">TesHash</a></li>
    </ul>
</div>

<div class="btn-group">
    <button type="button" class="btn btn-primary dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
        Sequence
    </button>
    <ul class="dropdown-menu">
        <li><a class="dropdown-item" @onclick="ShowSequenceHeap">Show Sequence Heap</a></li>
        <li><a class="dropdown-item" @onclick="ShowSequenceById">Show Sequence by Id</a></li>
        <li><a class="dropdown-item" @onclick="ShowSequenceByEcv">Show Sequence by EČV</a></li>
    </ul>
</div>

<div class="container mt-4">
    @if (_customers.Any())
    {
        <div class="row">
            @foreach (var customer in _customers)
            {
                <div class="col-md-6 mb-3">
                    <div class="card shadow-sm">
                        <div class="card-body">
                            <h5 class="card-title">
                                Customer: 
                                <input class="form-control form-control-sm d-inline w-auto" value="@customer.Id" readonly />
                                <input class="form-control form-control-sm d-inline w-auto" value="@customer.Ecv" readonly/>
                                <input class="form-control form-control-sm d-inline w-auto" value="@customer.Name" readonly/>
                                <input class="form-control form-control-sm d-inline w-auto" value="@customer.LastName" readonly/>
                            </h5>
                            <hr />
                            <h6>Service Visits:</h6>
                            @if (customer.ServiceVisit.Any())
                            {
                                <ul class="list-group">
                                    @for (int i = 0; i < customer.ValidServiceNum; ++i)
                                    {   
                                        int index = i;
                                        <li class="list-group-item">
                                            <button class="btn btn-primary btn-sm mt-3" @onclick="() => ShowUpdateServDialog(customer, index)">
                                                Update Service Visit
                                            </button>
                                            <button class="btn btn-danger btn-sm mt-3" @onclick="() => DeleteServiceVisit(customer, index)">
                                                Delete Service Visit
                                            </button>
                                            <div class="mb-2">
                                                <strong>Date:</strong>
                                                <input type="date" class="form-control form-control-sm" value="@customer.ServiceVisit[i].Date.ToString("yyyy-MM-dd")" readonly/>
                                            </div>
                                            <div class="mb-2">
                                                <strong>Price:</strong>
                                                <input type="number" class="form-control form-control-sm" value="@customer.ServiceVisit[i].Price" readonly/>
                                            </div>
                                            @for (int j = 0; j < customer.ServiceVisit[i].ValidDesc; ++j)
                                            {
                                                <div class="mb-2">
                                                    <strong>Description @j:</strong>
                                                    <textarea class="form-control form-control-sm" readonly>@customer.ServiceVisit[i].Description[j]</textarea>
                                                </div>
                                            }
                                        </li>
                                    }
                                </ul>
                            }
                            else
                            {
                                <p class="text-muted">No service visits available.</p>
                            }

                            @if (customer.ValidServiceNum < customer.ServiceVisit.Length)
                            {
                                <button class="btn btn-success btn-sm mt-3" @onclick="() => ShowUpdateServDialog(customer, customer.ValidServiceNum)">
                                    Add Service Visit
                                </button>
                            }
                             <button class="btn btn-primary btn-sm mt-3" @onclick="() => ShowUpdateCustomerDialog(customer)">
                                Update Customer
                            </button>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="alert alert-warning" role="alert">
            No customers available.
        </div>
    }

    @if (!string.IsNullOrEmpty(Message))
    {
        <div class="alert @MessageClass">@Message</div>
    }
</div>

<AddDialog 
    IsVisible="@isAddDialogVisible" 
    CustomerId="@_id" 
    Ecv="@_ecv" 
    CustomerName="@_name" 
    CustomerLastName="@_lastName"
    OnClose="CloseAddCustomerDialog"
    OnSubmit="AddCustomer" />

<AddServiceVisitDialog 
    IsVisible="@isAddServiceVisitDialogVisible" 
    CustomerId="@_id" 
    Ecv="@_ecv" 
    Date="@_date" 
    Price="@_price"
    Description1="@_description1"
    Description2="@_description2"
    Description3="@_description3"
    Description4="@_description4"
    Description5="@_description5"
    Description6="@_description6"
    Description7="@_description7"
    Description8="@_description8"
    Description9="@_description9"
    Description10="@_description10"
    OnClose="CloseAddServiceVisitDialog"
    OnSubmit="AddServiceVisit" />

<FindByIdDialog
    @bind-IsVisible="isFindByIdDialogVisible"  
    CustomerId="@_id" 
    OnClose="CloseFindByIdDialog"
    OnSubmit="FindById" />

<FindByEcvDialog
    @bind-IsVisible="isFindByEcvDialogVisible"   
    Ecv="@_ecv" 
    OnClose="CloseFindByEcvDialog"
    OnSubmit="FindByEcv" />

<UpdateDialog
    IsVisible="@isUpdateCustomerDialogVisible"    
    Customer="@_editedCustomer" 
    OnClose="CloseUpdateCustomerDialog"
    OnSubmit="UpdateCustomer" />

<UpdateServVisitDialog
    IsVisible="@isUpdateServDialogVisible"    
    Id="@_editServ.Id"
    Date="@_editServ.Date"
    Price="@_editServ.Price"
    Description1="@_description1"
    Description2="@_description2"
    Description3="@_description3"
    Description4="@_description4"
    Description5="@_description5"
    Description6="@_description6"
    Description7="@_description7"
    Description8="@_description8"
    Description9="@_description9"
    Description10="@_description10"
    OnClose="CloseUpdateServDialog"
    OnSubmit="UpdateServiceVisit" />

<GenerateDialog
    IsVisible="@isGenerateDialogVisible"    
    OnClose="CloseGenerateDialog"
    OnSubmit="Generate" />

<ShowSequenceHeap
    IsVisible="@isShowHeapDialogVisible"   
    consoleOutput="@_consoleOutput" 
    OnClose="CloseShowSequenceHeapDialog"/>



@code {
    private List<Customer> _customers = new();
    private Customer _editedCustomer = new();
    private static ServiceVisit _unused = new();
    private ServiceVisit _editServ = _unused.CreateInstance();
    private int _editedServNo = -1;

    private string Message { get; set; } = string.Empty;
    private string MessageClass { get; set; } = "alert-success";

    private bool isAddDialogVisible = false;
    private bool isFindByIdDialogVisible = false;
    private bool isFindByEcvDialogVisible = false;
    private bool isAddServiceVisitDialogVisible = false;
    private bool isUpdateCustomerDialogVisible = false;
    private bool isUpdateServDialogVisible = false;
    private bool isGenerateDialogVisible = false;
    private bool isShowHeapDialogVisible = false;

    private string _consoleOutput = string.Empty;
    private bool _updateServVisit = false;

    private int _id = 0;
    private string _ecv = "";
    private string _name = "";
    private string _lastName = "";

    private DateTime _date { get; set; } = DateTime.MinValue;
    private double _price { get; set; } = 0.0;
    private string _description1 { get; set; } = "";
    private string _description2 { get; set; } = "";
    private string _description3 { get; set; } = "";
    private string _description4 { get; set; } = "";
    private string _description5 { get; set; } = "";
    private string _description6 { get; set; } = "";
    private string _description7 { get; set; } = "";
    private string _description8 { get; set; } = "";
    private string _description9 { get; set; } = "";
    private string _description10 { get; set; } = "";


    public void AddCustomer(Customer customer) {
        string result = HomeService.Add(customer.Id, customer.Ecv, customer.Name, customer.LastName);

        if (result == "OK")
        {
            Message = "Customer successfully added!";
            MessageClass = "alert-success";
            isAddDialogVisible = false;
        }
        else
        {
            Message = result; 
            MessageClass = "alert-danger";
        }

        StateHasChanged();
    }

    public void FindById(int customerId) {
        _customers.Clear();
        _id = customerId;

        Customer? customer = HomeService.FindById(_id);
        if(customer is not null) {
            _customers.Add(customer);
            Message = string.Empty;
        } else {
            Message = $"Customer with ID {_id} does not exist !";
            MessageClass = "alert-danger";
        }
        

        isFindByIdDialogVisible = false;
        StateHasChanged();
    }

    public void FindByEcv(string ecv) {
        _customers.Clear();

        Customer? customer = HomeService.FindByEcv(ecv);
        if(customer is not null) {
            _customers.Add(customer);
            Message = string.Empty;
        } else  {
            Message = $"Customer with ECV {ecv} does not exist !";
            MessageClass = "alert-danger";
        }

        isFindByEcvDialogVisible = false;
        StateHasChanged();
    }

    public void AddServiceVisit(ServiceVisit servVisit) {
        _editedCustomer.AddServVisit(servVisit);
        HomeService.UpdateCustomer(_editedCustomer);
    }

    public void UpdateCustomer(Customer customer) {
        _editedCustomer = customer;
        HomeService.UpdateCustomer(_editedCustomer);
    }

    public void UpdateServiceVisit(ServiceVisit serviceVisit) {
        _editServ.CopyFrom(serviceVisit);
        
        if(_updateServVisit) {
            _editedCustomer.ServiceVisit[_editedServNo].CopyFrom(_editServ);
        } else {
            _editedCustomer.AddServVisit(_editServ);
        }

        HomeService.UpdateCustomer(_editedCustomer);
        
    }

    public void DeleteServiceVisit(Customer customer, int servNo) {

        customer.DeleteServiceVisit(servNo);
        UpdateCustomer(customer);

    }

    public void Generate(int num) {
        HomeService.Generate(num);
    }

    public void SaveState() {
        HomeService.SaveState();
        Message = "State saved!";
        MessageClass = "alert-success";
    }

    public void LoadState() {
        HomeService.LoadState();
        Message = "State loaded!";
        MessageClass = "alert-success";
    }

    public void TestHeap() {
        string result = HomeService.TestHeap();
        Message = result;
        if(result == "Test finished Sucessfully") {
            MessageClass = "alert-success";
        } else {
            MessageClass = "alert-danger";
        }
    }

    public void TestHash() {
        string result = HomeService.TestHeap();
        Message = result;
        if(result == "Test finished Sucessfully") {
            MessageClass = "alert-success";
        } else {
            MessageClass = "alert-danger";
        }
    }

    void ShowAddCustomerDialog()
    {
        _id = 0;
        _ecv = "";
        _name = "";
        _lastName = "";

        isAddDialogVisible = true;
        StateHasChanged();
    }

     void CloseAddCustomerDialog()
    {
        isAddDialogVisible = false;
        StateHasChanged();
    }

    void ShowFindByIdDialog()
    {
        _id = 0;

        isFindByIdDialogVisible = true;
        StateHasChanged();
    }

     void CloseFindByIdDialog()
    {
        isFindByIdDialogVisible = true;
        StateHasChanged();
    }

    void ShowFindByEcvDialog()
    {
        _ecv = "";

        isFindByEcvDialogVisible = true;
        StateHasChanged();
    }

     void CloseFindByEcvDialog()
    {
        isFindByEcvDialogVisible = true;
        StateHasChanged();
    }

    void ShowAddServiceVisitDialog(Customer customer)
    {
        _editedCustomer = customer;
        _id = customer.Id;
        _ecv = customer.Ecv;

        _description1 = "";
        _description2 = "";
        _description3 = "";
        _description4 = "";
        _description5  = "";
        _description6 = "";
        _description7  = "";
        _description8  = "";
        _description9 = "";
        _description10  = "";


        isAddServiceVisitDialogVisible = true;
        StateHasChanged();
    }

    void CloseAddServiceVisitDialog()
    {
        isAddServiceVisitDialogVisible = false;
        StateHasChanged();
    }

    void ShowUpdateCustomerDialog(Customer customer) {
        _editedCustomer = customer;
        isUpdateCustomerDialogVisible = true;
        StateHasChanged();
    }

    void CloseUpdateCustomerDialog()
    {
        isUpdateCustomerDialogVisible = false;
        StateHasChanged();
    }

    void ShowUpdateServDialog(Customer customer, int servNo) {
        _editedCustomer = customer;

        if(_editedCustomer.ValidServiceNum <= servNo) {
            ServiceVisit serviceVisit = new();
            _editServ = serviceVisit.CreateInstance();
            customer.ServiceVisit[servNo].CopyFrom(_editServ);
            _updateServVisit = false;
        } else {
            _editServ = customer.ServiceVisit[servNo];
            _updateServVisit = true;
        }
        
        _editedServNo = servNo;

        if(customer.ServiceVisit[servNo].Description[0] == "xxxxxxxxxx" || customer.ServiceVisit[servNo].ValidDesc <= 0) {
            _description1 = "";
        } else {
            _description1 = customer.ServiceVisit[servNo].Description[0];
        }
        
        if(customer.ServiceVisit[servNo].Description[1] == "xxxxxxxxxx" || customer.ServiceVisit[servNo].ValidDesc <= 1) {
            _description2 = "";
        } else {
            _description2 = customer.ServiceVisit[servNo].Description[1];
        }

        if(customer.ServiceVisit[servNo].Description[2] == "xxxxxxxxxx" || customer.ServiceVisit[servNo].ValidDesc <= 2) {
            _description3 = "";
        } else {
            _description3 = customer.ServiceVisit[servNo].Description[2];
        }

        if(customer.ServiceVisit[servNo].Description[3] == "xxxxxxxxxx" || customer.ServiceVisit[servNo].ValidDesc <= 3) {
            _description4 = "";
        } else {
            _description4 = customer.ServiceVisit[servNo].Description[3];
        }
        if(customer.ServiceVisit[servNo].Description[4] == "xxxxxxxxxx" || customer.ServiceVisit[servNo].ValidDesc <= 4) {
            _description5 = "";
        } else {
            _description5 = customer.ServiceVisit[servNo].Description[4];
        }
        
        if(customer.ServiceVisit[servNo].Description[5] == "xxxxxxxxxx" || customer.ServiceVisit[servNo].ValidDesc <= 5) {
            _description6 = "";
        } else {
            _description6 = customer.ServiceVisit[servNo].Description[5];
        }

        if(customer.ServiceVisit[servNo].Description[6] == "xxxxxxxxxx" || customer.ServiceVisit[servNo].ValidDesc <= 6) {
            _description7 = "";
        } else {
            _description7 = customer.ServiceVisit[servNo].Description[6];
        }

        if(customer.ServiceVisit[servNo].Description[7] == "xxxxxxxxxx" || customer.ServiceVisit[servNo].ValidDesc <= 7) {
            _description8 = "";
        } else {
            _description8 = customer.ServiceVisit[servNo].Description[7];
        }

        if(customer.ServiceVisit[servNo].Description[8] == "xxxxxxxxxx" || customer.ServiceVisit[servNo].ValidDesc <= 8) {
            _description9 = "";
        } else {
            _description9 = customer.ServiceVisit[servNo].Description[8];
        }

        if(customer.ServiceVisit[servNo].Description[9] == "xxxxxxxxxx" || customer.ServiceVisit[servNo].ValidDesc <= 9) {
            _description10 = "";
        } else {
            _description10 = customer.ServiceVisit[servNo].Description[8];
        }
        
        isUpdateServDialogVisible = true;
        StateHasChanged();
    }

    void CloseUpdateServDialog()
    {
        isUpdateServDialogVisible = false;
        StateHasChanged();
    }

    void ShowGenerateDialog() {
        isGenerateDialogVisible = true;
        StateHasChanged();
    }

    void CloseGenerateDialog() {
        isGenerateDialogVisible = false;
        StateHasChanged();
    }

    private void ShowSequenceHeap()
    {
        _consoleOutput = HomeService.ShowSequenceHeap();
        isShowHeapDialogVisible = true;
        StateHasChanged();
    }

    private void CloseShowSequenceHeapDialog()
    {
        isShowHeapDialogVisible = false;
        StateHasChanged();
    }

    private void ShowSequenceById()
    {
        _consoleOutput = HomeService.ShowSequenceById();
        isShowHeapDialogVisible = true;
        StateHasChanged();
    }

    private void ShowSequenceByEcv()
    {
        _consoleOutput = HomeService.ShowSequenceByEcv();
        isShowHeapDialogVisible = true;
        StateHasChanged();
    }
}